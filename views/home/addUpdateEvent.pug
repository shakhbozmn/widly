include ../head.pug
body
  .wd-event-add-update
    .wd-event-add-update-content.container
      .wd-header 
        .back-icon 
          a(href="/") 
            i.fas.fa-chevron-left
        h1.wd-title #{mode}
      .wd-header-content.wd-input-field
        label(for="eventName" class="wd-form-label") Event Name
        input(type="text" class="wd-form-control" id="eventName" name="eventName" placeholder="Add Event Name" required)
      .wd-main-content.wd-input-field
        label(for="eventDateTime" class="wd-form-label") Event Date/Time
        .wd-input-group.date(id="datetimepicker1" data-target-input="nearest")
          input(type="text" class="wd-form-control wd-datetimepicker-input" data-target="#datetimepicker1" id="eventDateTime" placeholder="Select Date for Event" name="eventDateTime" required)
            
      .wd-input-field
        label(for="venue" class="wd-form-label") Venue
        input(type="text" class="wd-form-control" id="venue" name="venue" placeholder="Location" required)
      .wd-input-field
        label(for="contactPhone" class="wd-form-label") Contact Phone
        input(type="tel" class="wd-form-control" id="contactPhone" name="contactPhone" placeholder="+998xxxxxxxxx" required value="+998")
      .wd-input-field
        label(for="seat" class="wd-form-label") Seat
        input(type="text" class="wd-form-control" id="seat" name="seat" placeholder="How Many Seats?" required)
      .wd-button-group
        button(type="submit" class="wd-btn wd-btn-primary" onclick="window.location.href='/eventList'") Events List 
        button(type="submit" class="wd-btn wd-btn-success" onclick="submitForm()") #{mode === 'Update Existing Event' ? 'Update' : 'Let It Be!'}

  script.
    const format = 'DD/MM/YYYY HH:mm'
    const picker = new tempusDominus.TempusDominus(document.getElementById('datetimepicker1'),{
        localization: {
            'locale': 'fr'
        }
    })
    picker.dates.formatInput = function(date) {
        return moment(date).format(format)
    }

    if ("#{mode}" === "Update Existing Event") {
      const eventData = !{JSON.stringify(eventData || {})}.event;
      document.getElementById('eventName').value = eventData.eventName || '';

      picker.dates.setValue(
        new tempusDominus.DateTime(moment(eventData.eventDateTime, format))
      );

      document.getElementById('venue').value = eventData.venue || '';
      document.getElementById('contactPhone').value = eventData.contactPhone || '';
      document.getElementById('seat').value = eventData.seat || '';
    }

    function submitForm() {
      const eventData = {
        eventName: document.getElementById('eventName').value,
        eventDateTime: document.getElementById('eventDateTime').value,
        venue: document.getElementById('venue').value,
        contactPhone: document.getElementById('contactPhone').value,
        seat: document.getElementById('seat').value,
      };

      const url = "#{mode}" === "Update Existing Event" ? `/api/event/${!{JSON.stringify(eventData || {})}.id}` : '/api/event';
      const method = "#{mode}" === "Update Existing Event" ? 'put' : 'post';

      axios[method](url, eventData).then(response => {
        alert('Success!');
        location.href = '/eventList'
      })
      .catch(error => {
        if(error.response)
          alert(JSON.stringify(error.response.data.errors))
        else
          alert(error)
      });
    }
